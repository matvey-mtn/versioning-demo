description 'Infrastructure project - this build is separate from versioning-demo root project'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        /* kotlin plugin dependency */
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

subprojects { subproject ->

    repositories {
        jcenter()
    }

    /* declaring default group and version coordinates */
    group 'io.logz.example.infrastructure'
    version '1.0.0'

    /* applying plugins for all subprojects */
    apply plugin: 'kotlin'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    String camelCaseName = moduleNameToCamelCase(subproject.name)

    task ("enable${camelCaseName}CompositeBuild") {
        group = 'Tools'
        description = "Enable composite build for ${subproject.name}"
        doLast {
            def compositeEnableFile = new File("${parent.getProjectDir().path}/${subproject.name}/.composite-enable.properties")
            println(compositeEnableFile.path)
            compositeEnableFile.createNewFile()
            /* group:artifact:version */
            String moduleGAV = "gav=${subproject.group}:${subproject.name}:${subproject.version}"
            String target = "target=${subproject.name}"
            compositeEnableFile.write moduleGAV
            compositeEnableFile.append "\n"
            compositeEnableFile.append target
        }
    }

    task ("disable${camelCaseName}CompositeBuild") {
        group = 'Tools'
        description = "Disable composite build for ${subproject.name}"
        doLast {
            File file = file("${parent.getProjectDir().path}/${subproject.name}/.composite-enable.properties")
            if (file.exists()) {
                file.delete()
            }
        }
    }

    dependencies {
        /* kotlin */
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

        /* test */
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    }

    test {
        useJUnitPlatform()
    }
}

private static String moduleNameToCamelCase(subprojectName) {
    def split = subprojectName.toString().split("-")
    def camelCaseName = "";
    for (s in split) {
        camelCaseName += s.capitalize()
    }
    camelCaseName
}
